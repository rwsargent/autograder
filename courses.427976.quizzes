[{"id":956103,"title":"PC - Lab 03 - Matrix Programming Challenge","html_url":"https://utah.instructure.com/courses/427976/quizzes/956103","mobile_url":"https://utah.instructure.com/courses/427976/quizzes/956103?force_user=1\u0026persist_headless=1","description":"\u003Cp\u003EProgramming Challenge Labs are just that. You will have to write a program to solve a programming challenge during the lab.  You will be expected to complete a syntactically and logically correct program in a fixed amount of time.  Additionally, there may be some written answer requirements.\u003C/p\u003E\n\u003Cp\u003EIn the \"real world\" your employer will not give you unlimited time for trial and error.  You must show that you can complete required tasks in a timely fashion. This is also important in academics, where it is hard for the course staff to accurately assess your learning if you use \"unlimited\" time to solve a programming problem.\u003C/p\u003E\n\u003Cp\u003EPlease read the directions completely before starting. Remember, we are looking for \u003Cstrong\u003Eclean\u003C/strong\u003E, \u003Cstrong\u003Ereadable\u003C/strong\u003E code just as much as we are looking for correct answers. Once you are satisfied with your solution, please \u003Cstrong\u003Ere-read\u003C/strong\u003E your code, and refactor for the sake of readability. \u003C/p\u003E\n\u003Cp\u003EThis challenge must be attempted in Lab. You will only have 50 minutes to complete it. \u003C/p\u003E","quiz_type":"assignment","time_limit":50,"shuffle_answers":false,"show_correct_answers":true,"scoring_policy":"keep_highest","allowed_attempts":1,"one_question_at_a_time":false,"question_count":1,"points_possible":100.0,"cant_go_back":false,"access_code":"matrix","ip_filter":null,"due_at":"2017-01-31T00:00:00Z","lock_at":"2017-02-04T00:15:00Z","unlock_at":"2017-01-30T15:30:00Z","published":true,"unpublishable":false,"locked_for_user":true,"lock_info":{"asset_string":"quizzes:quiz_956103","lock_at":"2017-02-04T00:15:00Z","can_view":true},"lock_explanation":"This quiz was locked Feb 3 at  5:15pm.","hide_results":null,"show_correct_answers_at":null,"hide_correct_answers_at":null,"all_dates":[{"due_at":"2017-01-31T00:00:00Z","unlock_at":"2017-01-30T15:30:00Z","lock_at":"2017-02-04T00:15:00Z","base":true}],"can_unpublish":false,"can_update":true,"require_lockdown_browser":false,"require_lockdown_browser_for_results":false,"require_lockdown_browser_monitor":false,"lockdown_browser_monitor_data":null,"speed_grader_url":"https://utah.instructure.com/courses/427976/gradebook/speed_grader?assignment_id=3770903","permissions":{"read_statistics":true,"manage":true,"read":true,"update":true,"create":true,"submit":true,"preview":true,"delete":true,"grade":true,"review_grades":true,"view_answer_audits":false},"quiz_reports_url":"https://utah.instructure.com/api/v1/courses/427976/quizzes/956103/reports","quiz_statistics_url":"https://utah.instructure.com/api/v1/courses/427976/quizzes/956103/statistics","message_students_url":"https://utah.instructure.com/api/v1/courses/427976/quizzes/956103/submission_users/message","section_count":1,"quiz_submission_versions_html_url":"https://utah.instructure.com/courses/427976/quizzes/956103/submission_versions","assignment_id":3770903,"one_time_results":false,"only_visible_to_overrides":false,"assignment_group_id":680761,"show_correct_answers_last_attempt":false,"version_number":31,"question_types":["file_upload_question"],"has_access_code":true,"post_to_sis":false},{"id":958637,"title":"PC - Lab 05 - Generics and Comparators","html_url":"https://utah.instructure.com/courses/427976/quizzes/958637","mobile_url":"https://utah.instructure.com/courses/427976/quizzes/958637?force_user=1\u0026persist_headless=1","description":"\u003Cp\u003E\u003Cspan\u003EThis challenge must be attempted in Lab. You will only have 50 minutes to complete it. \u003C/span\u003E\u003C/p\u003E\n\u003Cp\u003ETo receive credit for today's challenge you must:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003ESubmit a single file named AnimalChallenge.java\u003C/li\u003E\n\u003Cli\u003EThe code \u003Cstrong\u003Emust \u003C/strong\u003Ecompile. \u003Cstrong\u003ENo\u003C/strong\u003E credit will be given code that doesn't compile.\u003C/li\u003E\n\u003Cli\u003EThe code \u003Cstrong\u003Emust \u003C/strong\u003Ebe free of warnings. \u003Cstrong\u003ENo\u003C/strong\u003E credit will be given to code that has warnings.\u003C/li\u003E\n\u003Cli\u003EThe code \u003Cstrong\u003Emust\u003C/strong\u003E not use S\u003Cspan\u003EuppressWarnings\u003C/span\u003E. \u003Cstrong\u003ENo\u003C/strong\u003E\u003Cspan\u003E credit will be given to code that suppresses warnings.\u003C/span\u003E\n\u003C/li\u003E\n\u003Cli\u003EThe code \u003Cstrong\u003Emust\u003C/strong\u003E be submitted before 5:15 pm the day of. \u003Cspan\u003E\u003Cstrong\u003ENo\u003C/strong\u003E credit will be given for l\u003C/span\u003Eate submissions.\n\u003Cul\u003E\n\u003Cli\u003EDO NOT LET THE TIMER RUN OUT ON YOU\u003C/li\u003E\n\u003C/ul\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003ETo prepare for this challenge, you should:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EKnow how to create generic methods and classes in Java.\u003C/li\u003E\n\u003Cli\u003EBe able to translate type constraints from English to Java.\u003C/li\u003E\n\u003Cli\u003EKnow how to use a Comparator.\u003C/li\u003E\n\u003Cli\u003EKnow how to do basic array manipulation. \u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EThere are two class structures that you'll be using for your Comparators. You will be asked to create new Comparators for these two classes. If you want a refresher of the different ways you can define a comparator, please refer to lab04.ComparatorPractice. \u003C/p\u003E\n\u003Cpre\u003Epublic class Animal {\u003Cbr\u003E   public String name, genus, species;\u003Cbr\u003E   public int numOfTeeth, hungerLevel;\u003Cbr\u003E   public double height;\u003Cbr\u003E   public boolean isPredator;\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Epublic class Pet extends Animal {\u003Cbr\u003E   public int cuteness;\u003Cbr\u003E}\u003C/pre\u003E\n\u003Ch3\u003ESetup \u003C/h3\u003E\n\u003Cp\u003ETo set up for today's challenge, please download this jar and add it as an external archive to your build path (like we did for the maze). Create a lab05 package, your AnimalChallenge.java file will go there. Please include \u003Ca id=\"\" class=\" instructure_file_link\" title=\"lab05.jar\" href=\"https://utah.instructure.com/courses/427976/files/64295118/download?verifier=2xdxAUzUzL9uB93IK0bRRZE694r4hSbJ9t7BJMpv\u0026amp;wrap=1\" target=\"\" data-api-endpoint=\"https://utah.instructure.com/api/v1/courses/427976/files/64295118\" data-api-returntype=\"File\"\u003Elab05.jar\u003C/a\u003E on your build path as well. \u003C/p\u003E\n\u003Cp\u003EPlease read through this entire file before you begin implementing. This programming challenge is meant to\u003Cbr\u003Etest your ability to:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cspan\u003Efollow directions\u003C/span\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Cspan\u003Euse generics\u003C/span\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Cspan\u003E use comparators\u003C/span\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Cspan\u003Eask clarifying questions\u003C/span\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Cspan\u003Ehave fun!\u003C/span\u003E\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EIt is your job to make sure you understand what to do. If you implement something incorrectly \u003Cbr\u003E because you felt the directions were unclear you will loose those points.  Make sure you understand what you are supposed to be doing. \u003Cbr\u003E \u003Cbr\u003E If something is unclear please raise your hand and ask, we wont bite.\u003C/p\u003E\n\u003Ch2\u003EThe Challenge\u003C/h2\u003E\n\u003Cp\u003EYou will have four tasks to complete. \u003C/p\u003E\n\u003Ch4\u003ETask 1 (50 points)\u003C/h4\u003E\n\u003Cp\u003EGet AnimalChallenge.java to compile and run. There are two JavaDoc headers with their corresponding signatures removed. The first is for a method named insertInto. The second is for a class named AnimalComparator. Focus on getting these structures created, and successfully running the main method in AnimalChallenge.java for your first task.\u003C/p\u003E\n\u003Ch4\u003ETask 2 (30 points)\u003C/h4\u003E\n\u003Cp\u003EImplement insertInto. Details inside. \u003Cstrong\u003ETEST THIS THOROUGHLY\u003C/strong\u003E before moving on. \u003C/p\u003E\n\u003Ch4\u003ETask 3 (15 points)\u003C/h4\u003E\n\u003Cp\u003EImplement AnimalComparator. Details inside.\u003C/p\u003E\n\u003Ch4\u003ETask 4 (3 x 5 points)\u003C/h4\u003E\n\u003Cp\u003EImplement one to three different Comparators. Only one is needed for full credit, any additional Comparators are extra credit. Details on the Comparator inside. \u003C/p\u003E","quiz_type":"assignment","time_limit":50,"shuffle_answers":false,"show_correct_answers":true,"scoring_policy":"keep_highest","allowed_attempts":1,"one_question_at_a_time":false,"question_count":1,"points_possible":100.0,"cant_go_back":false,"access_code":"java","ip_filter":null,"due_at":"2017-02-14T00:25:00Z","lock_at":"2017-02-14T06:59:59Z","unlock_at":null,"published":true,"unpublishable":false,"locked_for_user":true,"lock_info":{"asset_string":"quizzes:quiz_958637","lock_at":"2017-02-14T06:59:59Z","can_view":true},"lock_explanation":"This quiz was locked Feb 13 at 11:59pm.","hide_results":null,"show_correct_answers_at":null,"hide_correct_answers_at":null,"all_dates":[{"due_at":"2017-02-14T00:25:00Z","unlock_at":null,"lock_at":"2017-02-14T06:59:59Z","base":true}],"can_unpublish":false,"can_update":true,"require_lockdown_browser":false,"require_lockdown_browser_for_results":false,"require_lockdown_browser_monitor":false,"lockdown_browser_monitor_data":null,"speed_grader_url":"https://utah.instructure.com/courses/427976/gradebook/speed_grader?assignment_id=3785747","permissions":{"read_statistics":true,"manage":true,"read":true,"update":true,"create":true,"submit":true,"preview":true,"delete":true,"grade":true,"review_grades":true,"view_answer_audits":false},"quiz_reports_url":"https://utah.instructure.com/api/v1/courses/427976/quizzes/958637/reports","quiz_statistics_url":"https://utah.instructure.com/api/v1/courses/427976/quizzes/958637/statistics","message_students_url":"https://utah.instructure.com/api/v1/courses/427976/quizzes/958637/submission_users/message","section_count":1,"quiz_submission_versions_html_url":"https://utah.instructure.com/courses/427976/quizzes/958637/submission_versions","assignment_id":3785747,"one_time_results":false,"only_visible_to_overrides":false,"assignment_group_id":680761,"show_correct_answers_last_attempt":false,"version_number":13,"question_types":["file_upload_question"],"has_access_code":true,"post_to_sis":false},{"id":963237,"title":"PC - Lab 07 - Cycle Detection and Tree Traversal","html_url":"https://utah.instructure.com/courses/427976/quizzes/963237","mobile_url":"https://utah.instructure.com/courses/427976/quizzes/963237?force_user=1\u0026persist_headless=1","description":"\u003Cp\u003EAnother programming challenge! This challenge will focus on linked structures like the Linked List and Binary Tree. You'll be asked to write one method for the Linked List algorithm, and one method for a Binary Tree Traversal. I don't want to give away the surprise so most of the details will be found on the question page, but I can give you the breakdown here: \u003C/p\u003E\n\u003Ch3\u003EPoints\u003C/h3\u003E\n\u003Ch4\u003ELinked List:          30 pts (10 tests at three points each)\u003Cbr\u003EBinary Tree:         10 pts (5 tests at two points each)\u003Cbr\u003ECode Compiles:  60 pts (Hard to mess this one up)\u003C/h4\u003E\n\u003Cp\u003EThere will be some MINIMAL testing code provided. \u003C/p\u003E\n\u003Cp\u003E \u003C/p\u003E","quiz_type":"assignment","time_limit":55,"shuffle_answers":false,"show_correct_answers":true,"scoring_policy":"keep_highest","allowed_attempts":1,"one_question_at_a_time":false,"question_count":1,"points_possible":100.0,"cant_go_back":false,"access_code":"study","ip_filter":null,"due_at":"2017-03-07T00:30:00Z","lock_at":null,"unlock_at":null,"published":true,"unpublishable":false,"locked_for_user":true,"lock_info":{"asset_string":"quizzes:quiz_963237","missing_permission":"participate_as_student"},"lock_explanation":"This quiz is currently locked.","hide_results":null,"show_correct_answers_at":null,"hide_correct_answers_at":null,"all_dates":[{"due_at":"2017-03-07T00:30:00Z","unlock_at":null,"lock_at":null,"base":true}],"can_unpublish":false,"can_update":true,"require_lockdown_browser":false,"require_lockdown_browser_for_results":false,"require_lockdown_browser_monitor":false,"lockdown_browser_monitor_data":null,"speed_grader_url":"https://utah.instructure.com/courses/427976/gradebook/speed_grader?assignment_id=3810656","permissions":{"read_statistics":true,"manage":true,"read":true,"update":true,"create":true,"submit":true,"preview":true,"delete":true,"grade":true,"review_grades":true,"view_answer_audits":false},"quiz_reports_url":"https://utah.instructure.com/api/v1/courses/427976/quizzes/963237/reports","quiz_statistics_url":"https://utah.instructure.com/api/v1/courses/427976/quizzes/963237/statistics","message_students_url":"https://utah.instructure.com/api/v1/courses/427976/quizzes/963237/submission_users/message","section_count":1,"quiz_submission_versions_html_url":"https://utah.instructure.com/courses/427976/quizzes/963237/submission_versions","assignment_id":3810656,"one_time_results":false,"only_visible_to_overrides":false,"assignment_group_id":680761,"show_correct_answers_last_attempt":false,"version_number":5,"question_types":["file_upload_question"],"has_access_code":true,"post_to_sis":false},{"id":968198,"title":"PC - Lab 10 - Iterators","html_url":"https://utah.instructure.com/courses/427976/quizzes/968198","mobile_url":"https://utah.instructure.com/courses/427976/quizzes/968198?force_user=1\u0026persist_headless=1","description":"\u003Ch2\u003EIterators\u003C/h2\u003E\n\u003Cp\u003EFor this challenge, you'll be asked to implement an iterator for two data structures. Part of this challenge will be understanding how the data structures are implemented, so take a little bit of time to familiarize yourself with the implementation choices the programmer took. Do not change any of the data structure's code. Only add an iterator to it. \u003C/p\u003E\n\u003Cp\u003EPlease take a moment to familiarize yourself with that \u003Ca id=\"\" class=\"\" title=\"\" href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html\" target=\"\"\u003EJava documentation\u003C/a\u003E on the Iterator interface. Please note that for this challenge, you are \u003Cstrong\u003Enot\u003C/strong\u003E expected to implement \"forEachRemaining().\" Focus on next(), hasNext() and remove(). Please read the documentation thoroughly! You will be tested on everything defined there. \u003C/p\u003E\n\u003Ch4\u003ECreate a package named \"lab10\"\u003C/h4\u003E\n\u003Ch4\u003E\u003Cspan style=\"color: #ff0000;\"\u003ETest Your Code\u003C/span\u003E\u003C/h4\u003E\n\u003Cp\u003E\u003Cspan style=\"color: #000000;\"\u003EPlease test your code as your are writing it. Do try to complete all the required methods BEFORE testing anything. As you are implementing the challenge, write some tests to double check your work. You will not be asked to submit your testing code, so make it as quick-n-dirty as you like!\u003C/span\u003E\u003C/p\u003E\n\u003Ch2\u003EPoint break down\u003C/h2\u003E\n\u003Ch4\u003EShowing up and submitting code that compiles: 50 points\u003C/h4\u003E\n\u003Ch4\u003EData Structure 1\u003C/h4\u003E\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Ch4\u003EIteration: 20 points\u003C/h4\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Ch4\u003ERemove : 6 points (extra credit)\u003C/h4\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch4\u003E\u003C/h4\u003E\n\u003Ch4\u003EData Structure 2\u003C/h4\u003E\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Ch4\u003EIteration: 20 points\u003C/h4\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Ch4\u003ERemove : 6 points (extra credit)\u003C/h4\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EHint: Remove is not worth as much as the standard iteration. Focus on thoroughly testing your iteration before worrying about remove.\u003C/p\u003E\n\u003Cp\u003EThis challenge is only worth 90 points. \u003C/p\u003E\n\u003Ch3\u003EQuick Recap:\u003C/h3\u003E\n\u003Cp\u003EThe Java iterator interface really needs three methods: next(), hasNext(), and remove.\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cspan style=\"text-decoration: underline;\"\u003E\u003Cstrong\u003Enext()\u003C/strong\u003E\u003C/span\u003E This method simultaneously returns the next item in the iteration, AND moves the iterator forward one element. It might be easier to think of the iterator keeping track of a 'next' item, instead of the current item. This method \u003Cstrong\u003Ethrows \u003C/strong\u003Ea \u003Cstrong\u003ENoSuchElementException()\u003C/strong\u003E if next() is called after the iteration is complete.   \u003C/li\u003E\n\u003Cli\u003E\n\u003Cspan style=\"text-decoration: underline;\"\u003E\u003Cstrong\u003EhasNext()\u003C/strong\u003E\u003C/span\u003E Checks to see if there is anything left in the iteration. \u003C/li\u003E\n\u003Cli\u003E\n\u003Cstrong\u003E\u003Cspan style=\"text-decoration: underline;\"\u003Eremove()\u003C/span\u003E \u003C/strong\u003ERemoves the most recently seen element from the collection. Can only be called once per each next call, throws an \u003Cstrong\u003EIllegalStateException \u003C/strong\u003Eif a call to remove() happens without a preceding next call. \u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch3\u003ESubmitting\u003C/h3\u003E\n\u003Cp\u003EPlease only submit Lab10.java (available when the quiz starts). BOTH data structures are defined as public inner classes inside Lab10. The iterators for each data structure are already started, you'll just need to fill them out. I know that this makes for a really long file, but it makes it easier to grade. The iterators you have to write for this challenge start on line 11 and line 196. They will be clearly marked. \u003C/p\u003E\n\u003Cp\u003EYou will have 50 minutes to complete this challenge, with the timer set for 55 minutes. I will not accept late submissions. \u003C/p\u003E","quiz_type":"assignment","time_limit":55,"shuffle_answers":false,"show_correct_answers":true,"scoring_policy":"keep_highest","allowed_attempts":1,"one_question_at_a_time":false,"question_count":1,"points_possible":90.0,"cant_go_back":false,"access_code":"puppy","ip_filter":null,"due_at":"2017-04-03T23:15:00Z","lock_at":null,"unlock_at":"2017-04-02T06:00:00Z","published":true,"unpublishable":false,"locked_for_user":true,"lock_info":{"asset_string":"quizzes:quiz_968198","missing_permission":"participate_as_student"},"lock_explanation":"This quiz is currently locked.","hide_results":null,"show_correct_answers_at":null,"hide_correct_answers_at":null,"all_dates":[{"due_at":"2017-04-03T23:15:00Z","unlock_at":"2017-04-02T06:00:00Z","lock_at":null,"base":true}],"can_unpublish":false,"can_update":true,"require_lockdown_browser":false,"require_lockdown_browser_for_results":false,"require_lockdown_browser_monitor":false,"lockdown_browser_monitor_data":null,"speed_grader_url":"https://utah.instructure.com/courses/427976/gradebook/speed_grader?assignment_id=3838380","permissions":{"read_statistics":true,"manage":true,"read":true,"update":true,"create":true,"submit":true,"preview":true,"delete":true,"grade":true,"review_grades":true,"view_answer_audits":false},"quiz_reports_url":"https://utah.instructure.com/api/v1/courses/427976/quizzes/968198/reports","quiz_statistics_url":"https://utah.instructure.com/api/v1/courses/427976/quizzes/968198/statistics","message_students_url":"https://utah.instructure.com/api/v1/courses/427976/quizzes/968198/submission_users/message","section_count":1,"quiz_submission_versions_html_url":"https://utah.instructure.com/courses/427976/quizzes/968198/submission_versions","assignment_id":3838380,"one_time_results":false,"only_visible_to_overrides":false,"assignment_group_id":680761,"show_correct_answers_last_attempt":false,"version_number":7,"question_types":["file_upload_question"],"has_access_code":true,"post_to_sis":false}]